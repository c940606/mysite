from datetime import timedelta
from fastapi import APIRouter
from fastapi import Depends
from fastapi.security import OAuth2PasswordRequestForm
from api.user import crud
from api.user.auth import validate_user, manager, get_user
from api.user.serializes import UserOutSchema, UserInSchema

router = APIRouter()
manager.user_loader()(get_user)


@router.post("/register", response_model=UserOutSchema)
async def create_user(user: UserInSchema) -> UserOutSchema:
    return await crud.create_user(user)


@router.post('/auth/token')
async def login(user: OAuth2PasswordRequestForm = Depends()):
    user = await validate_user(user)
    access_token = manager.create_access_token(
        data=dict(sub=user.username), expires=timedelta(hours=12)
    )
    return {'access_token': access_token, 'token_type': 'bearer'}


@router.get('/protected')
def protected_route(user=Depends(manager)):
    return {"data": "hello world"}
